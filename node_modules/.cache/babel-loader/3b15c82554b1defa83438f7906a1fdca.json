{"ast":null,"code":"var _jsxFileName = \"/Users/k19053kk/charirion/src/context/AuthContext.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { createContext, useEffect, useState } from \"react\";\nimport { getAuth, onAuthStateChanged } from \"firebase/auth\";\nimport { doc, getDoc } from \"firebase/firestore\";\nimport { db } from \"../firebase\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst auth = getAuth();\nconst initUser = {\n  isLoggedIn: false,\n  uid: \"\",\n  email: \"\",\n  name: \"\",\n  role: 0\n};\nexport const AuthContext = /*#__PURE__*/createContext(initUser);\nexport const AuthProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [user, setUser] = useState(initUser);\n  useEffect(() => {\n    onAuthStateChanged(auth, user => {\n      if (user) {\n        // User is signed in, see docs for a list of available properties\n        // https://firebase.google.com/docs/reference/js/firebase.User\n        const uid = user.uid;\n        const email = user.email;\n        const docRef = doc(db, \"users\", uid);\n        const docSnap = getDoc(docRef);\n        docSnap.then(result => {\n          const data = result.data();\n          setUser({\n            isLoggedIn: true,\n            uid: uid,\n            email: email,\n            name: data === null || data === void 0 ? void 0 : data.name,\n            role: data === null || data === void 0 ? void 0 : data.role\n          });\n        }).catch(err => {\n          console.log(err);\n        });\n      }\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: user,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 10\n  }, this);\n};\n\n_s(AuthProvider, \"tIgvhhVoio5QBAaEVHQYK7DelpI=\");\n\n_c = AuthProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"sources":["/Users/k19053kk/charirion/src/context/AuthContext.tsx"],"names":["React","createContext","useEffect","useState","getAuth","onAuthStateChanged","doc","getDoc","db","auth","initUser","isLoggedIn","uid","email","name","role","AuthContext","AuthProvider","children","user","setUser","docRef","docSnap","then","result","data","catch","err","console","log"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,SAA/B,EAA0CC,QAA1C,QAA0D,OAA1D;AACA,SAASC,OAAT,EAAkBC,kBAAlB,QAA4C,eAA5C;AACA,SAASC,GAAT,EAAcC,MAAd,QAA4B,oBAA5B;AACA,SAASC,EAAT,QAAmB,aAAnB;;AAEA,MAAMC,IAAI,GAAGL,OAAO,EAApB;AASA,MAAMM,QAAQ,GAAG;AAAEC,EAAAA,UAAU,EAAE,KAAd;AAAqBC,EAAAA,GAAG,EAAE,EAA1B;AAA8BC,EAAAA,KAAK,EAAE,EAArC;AAAyCC,EAAAA,IAAI,EAAE,EAA/C;AAAmDC,EAAAA,IAAI,EAAE;AAAzD,CAAjB;AACA,OAAO,MAAMC,WAAW,gBAAGf,aAAa,CAAeS,QAAf,CAAjC;AACP,OAAO,MAAMO,YAAY,GAAG,QAAuB;AAAA;;AAAA,MAAtB;AAAEC,IAAAA;AAAF,GAAsB;AACjD,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBjB,QAAQ,CAAeO,QAAf,CAAhC;AAEAR,EAAAA,SAAS,CAAC,MAAM;AACdG,IAAAA,kBAAkB,CAACI,IAAD,EAAQU,IAAD,IAAU;AACjC,UAAIA,IAAJ,EAAU;AACR;AACA;AACA,cAAMP,GAAG,GAAGO,IAAI,CAACP,GAAjB;AACA,cAAMC,KAAK,GAAGM,IAAI,CAACN,KAAnB;AAEA,cAAMQ,MAAM,GAAGf,GAAG,CAACE,EAAD,EAAK,OAAL,EAAcI,GAAd,CAAlB;AACA,cAAMU,OAAO,GAAGf,MAAM,CAACc,MAAD,CAAtB;AAEAC,QAAAA,OAAO,CACJC,IADH,CACSC,MAAD,IAAY;AAChB,gBAAMC,IAAI,GAAGD,MAAM,CAACC,IAAP,EAAb;AAEAL,UAAAA,OAAO,CAAC;AACNT,YAAAA,UAAU,EAAE,IADN;AAENC,YAAAA,GAAG,EAAEA,GAFC;AAGNC,YAAAA,KAAK,EAAEA,KAHD;AAINC,YAAAA,IAAI,EAAEW,IAAF,aAAEA,IAAF,uBAAEA,IAAI,CAAEX,IAJN;AAKNC,YAAAA,IAAI,EAAEU,IAAF,aAAEA,IAAF,uBAAEA,IAAI,CAAEV;AALN,WAAD,CAAP;AAOD,SAXH,EAYGW,KAZH,CAYUC,GAAD,IAAS;AACdC,UAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACD,SAdH;AAgBD;AACF,KA3BiB,CAAlB;AA6BD,GA9BQ,EA8BN,EA9BM,CAAT;AA+BA,sBAAO,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAER,IAA7B;AAAA,cAAoCD;AAApC;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CAnCM;;GAAMD,Y;;KAAAA,Y","sourcesContent":["import React, { createContext, useEffect, useState } from \"react\";\nimport { getAuth, onAuthStateChanged } from \"firebase/auth\";\nimport { doc, getDoc } from \"firebase/firestore\";\nimport { db } from \"../firebase\";\n\nconst auth = getAuth();\n\ntype ContextProps = {\n  isLoggedIn: boolean; // 認証状態(true: ログイン中, false: 未ログイン)\n  uid: string; // ユーザに与えられる一意の識別子\n  email: string | null; // メールアドレス\n  name: string; // ニックネーム\n  role: number; // ロール(0: 一般, 1: 管理者)\n};\nconst initUser = { isLoggedIn: false, uid: \"\", email: \"\", name: \"\", role: 0 };\nexport const AuthContext = createContext<ContextProps>(initUser);\nexport const AuthProvider = ({ children }: any) => {\n  const [user, setUser] = useState<ContextProps>(initUser);\n\n  useEffect(() => {\n    onAuthStateChanged(auth, (user) => {\n      if (user) {\n        // User is signed in, see docs for a list of available properties\n        // https://firebase.google.com/docs/reference/js/firebase.User\n        const uid = user.uid;\n        const email = user.email;\n\n        const docRef = doc(db, \"users\", uid);\n        const docSnap = getDoc(docRef);\n\n        docSnap\n          .then((result) => {\n            const data = result.data();\n\n            setUser({\n              isLoggedIn: true,\n              uid: uid,\n              email: email,\n              name: data?.name,\n              role: data?.role,\n            });\n          })\n          .catch((err) => {\n            console.log(err);\n          });\n\n      }\n    });\n\n  }, []);\n  return <AuthContext.Provider value={user}>{children}</AuthContext.Provider>;\n};\n"]},"metadata":{},"sourceType":"module"}